/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2014 Krzysztof Narkiewicz <krzysztof.narkiewicz@ezaquarii.com>
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef DRIVER_H
#define DRIVER_H

#include <memory>
#include <string_view>
#include <unordered_map>

#include "location.hh"
#include "scanner.h"

// autogenerated by Bison, don't panic
// if your IDE can't resolve it - call make first
#include "parser.hpp"

namespace AST {
class ASTNode;
}  // namespace AST

namespace EzAquarii {

/**
 * This class is the interface for our scanner/lexer. The end user
 * is expected to use this. It drives scanner/lexer, keeps
 * parsed AST and generally is a good place to store additional
 * context data. Both parser and lexer have access to it via internal
 * references.
 *
 * I know that the AST is a bit too strong word for a simple
 * vector with nodes, but this is only an example. Get off me.
 */
class Driver {
   public:
    Driver();

    int Run();

    /**
     * Run parser. Results are stored inside.
     * \returns 0 on success, 1 on failure
     */
    int parse();

    /**
     * Switch scanner input stream. Default is standard input (std::cin).
     * It will also reset AST.
     */
    void switchInputStream(std::istream* is);

    /**
     * This is needed so that Scanner and Parser can call some
     * methods that we want to keep hidden from the end user.
     */
    friend class Parser;
    friend class Scanner;

    void SetScannerDebugLevel(int level);
    void SetParserDebugLevel(int level);

    std::shared_ptr<AST::ASTNode> GetAST();

   private:
    // Used internally by Scanner YY_USER_ACTION to update location indicator
    void ScannerAction(unsigned int length, std::string_view text);

    void newline();

    // Used to get last Scanner location. Used in error messages.
    const location& get_location() const;

    // functions
    std::shared_ptr<AST::ASTNode> make_program(
        std::shared_ptr<AST::Statements> top_level_list);

    std::shared_ptr<AST::Statements> make_empty_top_level_list();

    std::shared_ptr<AST::Statements> append_top_level(
        std::shared_ptr<AST::Statements> top_level_list,
        std::shared_ptr<AST::ASTNode> stmt);

    std::shared_ptr<AST::ASTNode> make_function(
        AST::Type return_type, const std::string& name,
        std::shared_ptr<AST::Params> params,
        std::shared_ptr<AST::Statements> list);

    std::shared_ptr<AST::ASTNode> make_function_call(
        const std::string& name, std::shared_ptr<AST::Statements> args);

    std::shared_ptr<AST::Statements> make_empty_arg_list();

    std::shared_ptr<AST::Statements> make_arg_list(
        std::shared_ptr<AST::ASTNode> stmt);

    std::shared_ptr<AST::Statements> append_arg(
        std::shared_ptr<AST::Statements> args,
        std::shared_ptr<AST::ASTNode> stmt);

    std::shared_ptr<AST::Statements> make_empty_stmt_list();

    std::shared_ptr<AST::Statements> append_stmt(
        std::shared_ptr<AST::Statements> list,
        std::shared_ptr<AST::ASTNode> stmt);

    std::shared_ptr<AST::Params> make_empty_param_list();

    std::shared_ptr<AST::Params> make_param_list(AST::Type type,
                                                 const std::string& name);

    std::shared_ptr<AST::Params> append_param(
        std::shared_ptr<AST::Params> params, AST::Type type,
        const std::string& name);

    std::shared_ptr<AST::ASTNode> make_return(
        std::shared_ptr<AST::ASTNode> expr);

    std::shared_ptr<AST::ASTNode> make_decl(AST::Type type,
                                            const std::string& name);

    std::shared_ptr<AST::ASTNode> make_integer(uint64_t value);

    std::shared_ptr<AST::ASTNode> make_assignment(
        const std::string& var, std::shared_ptr<AST::ASTNode> st);

    std::shared_ptr<AST::ASTNode> make_print(
        std::shared_ptr<AST::ASTNode> expr);

    std::shared_ptr<AST::ASTNode> make_string_literal(
        const std::string& string);

    std::shared_ptr<AST::ASTNode> make_bool_literal(const bool value);

    std::shared_ptr<AST::ASTNode> make_var(const std::string& var);

    std::shared_ptr<AST::ASTNode> make_arith_op(
        const std::string& op, std::shared_ptr<AST::ASTNode> lhs,
        std::shared_ptr<AST::ASTNode> rhs);

    std::shared_ptr<AST::ASTNode> make_logic_op(
        const std::string& op, std::shared_ptr<AST::ASTNode> lhs,
        std::shared_ptr<AST::ASTNode> rhs);

    std::shared_ptr<AST::ASTNode> make_if(
        std::shared_ptr<AST::ASTNode> condition,
        std::shared_ptr<AST::ASTNode> then_branch,
        std::shared_ptr<AST::ASTNode> else_branch);

    std::shared_ptr<AST::ASTNode> make_while(
        std::shared_ptr<AST::ASTNode> condition,
        std::shared_ptr<AST::ASTNode> stmt);

    std::shared_ptr<AST::ASTNode> make_while(
        std::shared_ptr<AST::ASTNode> condition,
        std::shared_ptr<AST::Statements> list);

    std::shared_ptr<AST::ASTNode> make_array_declaration(
        const std::string& name, const AST::Type& type);

    std::shared_ptr<AST::ASTNode> make_array_access(
        const std::string& name, std::shared_ptr<AST::ASTNode> expr);

    std::shared_ptr<AST::ASTNode> make_array_assignment(
        const std::string& name, std::shared_ptr<AST::ASTNode> index,
        std::shared_ptr<AST::ASTNode> expr);

    std::shared_ptr<AST::ASTNode> with_location(
        std::shared_ptr<AST::ASTNode> node, const EzAquarii::location& loc);

    template <typename... Args>
    void ParserLog(Args... args) {
        if (parser_debug_level_ == 0) return;
        std::ostringstream oss;
        (oss << ... << args);
    }

    Scanner scanner_;
    Parser parser_;
    location loc_;

    std::shared_ptr<AST::ASTNode> ast_;

    std::unordered_map<std::string, std::shared_ptr<AST::ASTNode>> name_to_func;

    int scanner_debug_level_ = 0;
    int parser_debug_level_ = 0;
};

}  // namespace EzAquarii

#endif  // DRIVER_H
